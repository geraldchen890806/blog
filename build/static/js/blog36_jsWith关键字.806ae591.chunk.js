(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{jAap:function(n,r,o){"use strict";o.r(r);var a=o("q1tI"),e=o.n(a),t=o("IujW"),c=o.n(t);r.default=function(){return e.a.createElement(c.a,{source:'with通常被当作重复引用同一个对象中的多个属性的快捷方式，可以不需要重复引用对象本身。\r\n\r\n通常使用\r\n```\r\n// 单调乏味的重复"obj"\r\nobj.a = 2;\r\nobj.b = 3;\r\nobj.c = 4;\r\n\r\n// 简单的快捷方式\r\nwith (obj) {\r\n    a = 3;\r\n    b = 4;\r\n    c = 5;\r\n}\r\n```\r\n\r\n下面看一个特殊的例子\r\n```\r\nfunction foo(obj) {\r\n    with (obj) {\r\n        a = 2;\r\n    }\r\n}\r\n\r\nvar o1 = {\r\n    a: 3\r\n};\r\n\r\nvar o2 = {\r\n    b: 3\r\n};\r\n\r\nfoo( o1 );\r\nconsole.log( o1.a ); // 2\r\n\r\nfoo( o2 );\r\nconsole.log( o2.a ); // undefined\r\nconsole.log( a ); // 2—— a被泄漏到全局作用域上了！\r\n\r\n```\r\n\r\n结论：with实际是在当前位置建立一个新的词法作用域，所以不会在o2中新建a属性\r\n\r\n最好不要使用with，额外的性能消耗不说，在严格模式下还完全不起作用。。',htmlMode:"raw"})}}}]);