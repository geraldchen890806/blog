(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{PXmJ:function(r,n,e){"use strict";e.r(n);var t=e("q1tI"),o=e.n(t),s=e("IujW"),i=e.n(s);n.default=function(){return o.a.createElement(i.a,{source:'\n最近在做react-router升级到4.x的工作 记录下具体步骤吧\n\n### 项目中使用了redux，以下只对react+redux框架的使用者有点参考意义\n\n#### 使用到的包 react-router可以删除了\n```js\n"query-string": "5.1.1",\n"react-router": "4.3.1",\n"react-router-dom": "4.3.1",\n"connected-react-router": "5.0.1",\n```\n\n#### app.js(route)\n```js\nimport { Route, Redirect } from \'react-router-dom\';\nimport queryString from \'query-string\';\nimport { ConnectedRouter } from \'connected-react-router\';\nimport { store } from \'js/redux/store\'; //创建store\nimport history from \'js/redux/middleware/history\'; //因为多个地方使用history\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.checkAndrender = this.checkAndrender.bind(this);\n  }\n  componentDidMount() {\n    let { actions } = this.props;\n    actions.fetchBlogs();\n  }\n  // 重点\n  // react-router4不再parse location.history 而且没有params|routerParams了\n  // 所以想无缝切换 你需要这个方法\n  // https://github.com/ReactTraining/react-router/issues/4410\n  checkAndrender(Comp, props) {\n    let { history: { location = {} }, match = {} } = props;\n    props = {\n      ...props,\n      history: {\n        ...location,\n        query: queryString.parse(location.search)\n      },\n      params: {\n        ...match.params\n      },\n      routeParams: {\n        ...match.params\n      },\n      location: {\n        ...props.location,\n        query: queryString.parse(location.search)\n      }\n    };\n    return <Comp {...props} />;\n  }\n  render() {\n    return (\n      <ConnectedRouter history={history}>\n        <div>\n          <Header />\n          <div className="main">\n            <div className="mainContent">\n              <Route exact path="/" render={() => <Redirect to="/home" />} />\n              <Route path="/home" render={props => this.checkAndrender(Home, props)} />\n            </div>\n            <Side {...this.props} />\n          </div>\n        </div>\n      </ConnectedRouter>\n    );\n  }\n}\n\n```\n\n### 因为多个地方使用到history\n\n#### js/redux/middleware/history\n\n```js\n\nimport createHistory from \'history/createBrowserHistory\';\nconst history = createHistory();\nhistory.listen((location, action) => {\n  console.log(action, location.pathname, location.state);\n});\nexport default history;\n```\n\n#### js/redux/store\n\n```js\nimport { routerMiddleware } from \'react-router-redux\';\nimport { routerReducer } from \'connected-react-router\';\nconst store = createStore(\n  combineReducers({\n    ...reducers,\n    router: routerReducer\n  }),\n  applyMiddleware(routerMiddleware(history), ...)\n)\n```\n\n### 业务代码跟以前一样 基本只需要替换history.push\n\n```js\nimport history from \'js/redux/middleware/history\'; //因为多个地方使用history\nhistory.push(\'xxx\')\n```\n//替换之前\n```js\nimport {browserHistory} from \'react-router\';\nbrowserHistory.push(\'xxx\')\n\n```\n',htmlMode:"raw"})}}}]);