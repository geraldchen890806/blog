(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{"QdH/":function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){return u.default.createElement(r.default,{source:o.default,htmlMode:"raw"})};var u=a(t("q1tI")),r=a(t("IujW")),o=a(t("RwA5"));function a(n){return n&&n.__esModule?n:{default:n}}},RwA5:function(n,e){n.exports='js数据类型有2种，原始值(undefined, null, 布尔值, 数字和字符串)与对象(数组与函数)。\n\n类型转换分为3种，原始值互转，原始值转换成对象，对象转换成原始值\n\n原始值互转相对简单,比如true转换成字符串为"true",转换成数字为1\n\n原始值转换成对象也很简单,就是通过调用String(),Number()或Boolean()构造函数, 如Bolean(true),Number(3),Boolean([])也可以使用Object(3)\n\n这里主要讲一下对象转换成原始值\n\n对象转换成原始值过程如下\n1. 如果对象有valueOf()方法，并且返回一个原始值，则调用这个方法并转换成需要的原始值(数字,字符串..)\n2. 否则，如果对象有toString()方法，并且返回一个原始值，则调用这个方法并转换成需要的原始值(数字,字符串..)\n3. 否则，js抛出类型异常错误\n\n\n```\nfunction t(){};\nt.prototype.valueOf = function(){ return "a"; };\n\nnew t == "a"; // true\n\nt.prototype.valueOf = function(){ return {}; };\nt.prototype.toString = function(){ return "b"; };\n\nnew t == true; // true  "b" == true\n\n//在比较Date类型是，Date类型转换成原始值只使用toSting()方法\nnew Date("1/1/2015") == "Thu Jan 01 2015 00:00:00 GMT+0800 (中国标准时间)" // true\nnew Date("1/1/2015").valueOf(); // 1420041600000\n```\n参考[另一篇](http://renjm.com/blog/12)'}}]);