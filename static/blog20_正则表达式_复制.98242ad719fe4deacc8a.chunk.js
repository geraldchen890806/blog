(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{468:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.default=function(){return l.default.createElement(s.default,{source:o.default,htmlMode:"raw"})};var l=r(t(2)),s=r(t(493)),o=r(t(869));function r(e){return e&&e.__esModule?e:{default:e}}},869:function(e,n){e.exports='要求实现正则表达式的复制\n```\nRegExp.clone(/regex/)\n(/regex/).clone()\n```\n做法不难，只是为RegExp及其原型添加clone方法，不过有个问题需要注意。。\n\n先看实现方法\n```\nRegExp.prototype.clone = function() {\n  var ret = new RegExp(this);\n  ret.lastIndex = this.lastIndex;\n  return ret;\n};\n\nRegExp.clone = function(regex) {\n  return regex.clone(); //直接调用下面的原型方法\n};\n\n```\n需要注意的就是lastIndex这个属性,下面介绍下这个属性\n\n只有当正则表达式设置了全局搜索标志g的时候才会有这个属性,表示从字符串的第几个字符开始匹配正则表达式\n\n遵循以下几个规则\n\n1. 如果lastIndex值大于匹配字符串的长度，test和exec方法失败，lastIndex置为0\n```\nvar re = /te/g;\nconsole.log(re.lastIndex); //0\nre.test("test"); //true\nconsole.log(re.lastIndex); //2\nre.test("test"); //false\nconsole.log(re.lastIndex); //0\nre.test("test"); //true\n```\n\n2. 如果lastIndex值等于匹配字符串的长度并且正则表达式可以匹配空字符串，从lastIndex值处开始匹配\n```\nvar re = /$/g; //可以匹配任意字符串\nconsole.log(re.lastIndex); //0\nre.lastIndex = 2;\nconsole.log(re.lastIndex); //2\nre.test("te"); //true\nconsole.log(re.lastIndex); //2\nre.test("test"); //true\nconsole.log(re.lastIndex); //4\n```\n\n3. 如果lastIndex值等于匹配字符串的长度并且正则表达式不能匹配空字符串，匹配失败，lastIndex置为0\n```\nvar re = /\\\\w+/g; \nconsole.log(re.lastIndex); //0\nre.lastIndex = 2;\nconsole.log(re.lastIndex); //2\nre.test("te"); //false\nconsole.log(re.lastIndex); //0\n```\n\n4. 其他情况，lastIndex设为最后一次匹配成功的最后一个字符位置\n```\nvar re = /te/g; \nconsole.log(re.lastIndex); //0\nre.test("te1");            //true\nconsole.log(re.lastIndex); //2\nre.test("te1te2te3");      //true\nconsole.log(re.lastIndex); //5\nre.test("te1te2te3");      //true\nconsole.log(re.lastIndex); //8\n```\n\n所以复制正则表达式时需要复制lastIndex属性,否则会影响使用'}}]);