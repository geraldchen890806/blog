(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{468:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){return i.default.createElement(r.default,{source:h.default,htmlMode:"raw"})};var i=o(t(2)),r=o(t(508)),h=o(t(791));function o(n){return n&&n.__esModule?n:{default:n}}},791:function(n,e){n.exports="之前的一篇文章有写过node中使用marked，不过代码虽然有黑色背景突出显示，但是实在太丑。。。\n\n参照marked[官方示例](https://www.npmjs.com/package/marked)引入[highlight.js](https://highlightjs.org/) \"8.4.0\"\n\n```\nmarked.setOptions({\n  highlight: function (code) {\n    return require('highlight.js').highlightAuto(code).value;\n  }\n});\n```\n\n虽然关键字都有特殊颜色标识了 还是太丑。。。\n\n然后想起hexo的代码式样，果断copy下[式样](https://github.com/geraldchen890806/blog_nodejs/blob/master/public/stylesheets/style.css)，不过hexo的className 有点区别 没有\"hljs-\"前缀 \n需要加个配置\n\n```\nvar highlight = require(\"highlight.js\");\nhighlight.configure({\n  classPrefix: '\n})\n\nmarked.setOptions({\n  highlight: function (code) {\n    return highlight.highlightAuto(code).value;\n  }\n});\n```\n\n然后发现hexo的代码line number也挺帅 看下hexo的[源码](https://github.com/hexojs/hexo/blob/master/lib/util/highlight.js) copy下~~\n\n核心代码就是改写highlight方法\n\n```\nhighlight: function (code) {\n  var compiled = require('highlight.js').highlightAuto(code).value;\n\n  var lines = compiled.split('\\\\n'),\n    numbers = ',\n    content = ';\n\n  lines.forEach(function(item, i){\n    numbers += '<div class=\"line\">' + (i + 1) + '</div>';\n    content += '<div class=\"line\">' + item + '</div>';\n  });\n\n  var result = '<figure class=\"highlight\">' + '<table><tr>' +\n      '<td class=\"gutter\"><pre>' + numbers + '</pre></td>' +\n      '<td class=\"code\"><pre>' + content + '</pre></td>' +\n      '</tr></table>'+\n      '</figure>';\n  return result;\n}\n```\n\n当然因为hexo的代码式样中没有pre code这2个外层tag 所以代码式样有点问题\n\n不知道hexo怎么做的，没翻到源码。。。\n\n我的做法是重新实现marked的code方法\n\n```\nvar md = require(\"marked\");\nvar render = new md.Renderer();\nrender.code = function(code, lang, escaped) {\n  if (this.options.highlight) {\n    var out = this.options.highlight(code, lang);\n    if (out != null && out !== code) {\n      escaped = true;\n      code = out;\n    }\n  }\n\n  if (!lang) {\n    return (escaped ? code : escape(code, true));\n  }\n\n  return '<pre><code class=\"'\n    + this.options.langPrefix\n    + escape(lang, true)\n    + '\">'\n    + (escaped ? code : escape(code, true))\n    + '\\\\n</code></pre>\\\\n';\n}\nmd.setOptions({\n  renderer: render,\n  highlight: function(code){\n    ....\n  }\n});\n\n```\n"}}]);