(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{488:function(n,e,t){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.default=function(){return r.default.createElement(u.default,{source:a.default,htmlMode:"raw"})};var r=o(t(2)),u=o(t(506)),a=o(t(810));function o(n){return n&&n.__esModule?n:{default:n}}},810:function(n,e){n.exports='我们都知道使用构造函数模式创建对象，但是构造函数返回值对创建对象的影响确少有被关注\n\n首先介绍下使用new操作符创建一个实例的步骤：\n\n1. 创建一个新对象\n\n2. 将构造函数的作用域赋给新对象\n\n3. 执行构造函数中的代码\n\n4, 返回新对象\n\n举例说明\n```\nfunction Person(name, age) { // 约定构造函数首字母大写\n  this.name = name;\n  this.age = age;\n}\nvar p = new Person("a",1);\n\n//这里的new操作符可以理解为以下操作\nvar p = {};\nPerson.call(p,"a",1);\n```\n\n至于返回值的影响：如果函数调用时在前面加上了 new前缀，且返回值不是一个对象，则返回this(该新对象);\n\n```\nfunction T() {\n  this.a = 1;\n  return 1; // 或者其他几种基本类型 "1",true,null,undefined\n}\nvar s = new T(); // s: T {a: 1}\n```\n所以如果构造函数返回值为 String/Boolean/Number/Null/Undefined 之一 不影响new操作符创建实例\n\n```\nfunction T() {\n  this.a = 1;\n  return new Date(); //return /tt/; return function(){}; return {}； return [1,2]\n}\nvar s = new T(); // s为return语句内容\n```\n如果构造函数返回值为引用类型 Object/Array/Date/RegExp/Function 则new操作返回的就是返回值 而不是一个新的实例T {}\n\n特别注意：\n```\nfunction T() {\n  this.a = 1;\n  return new Boolean(true); // return new Number(1); return new String("a") \n}\nvar s = new T();// s也为返回值\n```\n\n所以创建构造函数 应当注意返回值的问题 其实不加返回值就行了。。。'}}]);